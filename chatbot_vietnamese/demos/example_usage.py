"""
V√≠ d·ª• s·ª≠ d·ª•ng Vietnamese Farm Chatbot v·ªõi ki·∫øn tr√∫c tinh vi
Example usage for Vietnamese Farm Chatbot with sophisticated architecture
"""

import os
import sys
from pathlib import Path

# Add parent directory to path for imports
sys.path.append(str(Path(__file__).parent.parent))

from chatbot_vietnamese.farm_chatbot import FarmVietnameseChatbot
from golett.utils.logger import get_logger

logger = get_logger(__name__)

def setup_environment():
    """Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt"""
    # Required environment variables
    required_vars = {
        "POSTGRES_CONNECTION": "postgresql://user:password@localhost:5432/golett_db",
        "QDRANT_URL": "http://localhost:6333",
        "CUBEJS_API_URL": "http://localhost:4000/cubejs-api/v1",
        "OPENAI_API_KEY": "your_openai_api_key_here"
    }
    
    print("üîß Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng...")
    
    for var, default_value in required_vars.items():
        if not os.getenv(var):
            if var == "OPENAI_API_KEY":
                print(f"‚ö†Ô∏è C·∫ßn thi·∫øt l·∫≠p {var}")
                print(f"   export {var}=your_actual_api_key")
            else:
                os.environ[var] = default_value
                print(f"‚úÖ ƒê√£ thi·∫øt l·∫≠p {var} v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh")
        else:
            print(f"‚úÖ {var} ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p")

def basic_usage_example():
    """V√≠ d·ª• s·ª≠ d·ª•ng c∆° b·∫£n"""
    print("\n" + "="*60)
    print("üìö V√ç D·ª§ S·ª¨ D·ª§NG C∆† B·∫¢N")
    print("="*60)
    
    try:
        # 1. Kh·ªüi t·∫°o chatbot v·ªõi c·∫•u h√¨nh ƒë·∫ßy ƒë·ªß
        print("1Ô∏è‚É£ Kh·ªüi t·∫°o chatbot...")
        
        chatbot = FarmVietnameseChatbot(
            postgres_connection=os.getenv("POSTGRES_CONNECTION"),
            cubejs_api_url=os.getenv("CUBEJS_API_URL"),
            cubejs_api_token=os.getenv("CUBEJS_API_TOKEN"),
            cubejs_schemas_path="cubejs/model/cubes",
            qdrant_url=os.getenv("QDRANT_URL"),
            knowledge_file_path="farm_data/farm_business_domain_knowledge_vietnamese.md",
            llm_model="gpt-4o",
            enable_advanced_memory=True,
            user_id="example_user"
        )
        
        print("‚úÖ Chatbot ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!")
        
        # 2. Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng
        print("\n2Ô∏è‚É£ Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng...")
        status = chatbot.get_system_status()
        
        for component, status_msg in status.items():
            print(f"   {component}: {status_msg}")
        
        # 3. B·∫Øt ƒë·∫ßu phi√™n chat
        print("\n3Ô∏è‚É£ B·∫Øt ƒë·∫ßu phi√™n chat...")
        session_id = chatbot.start_session({
            "user_type": "farm_manager",
            "session_purpose": "business_analysis",
            "language": "vietnamese"
        })
        
        print(f"‚úÖ Phi√™n chat ƒë√£ b·∫Øt ƒë·∫ßu: {session_id}")
        
        # 4. G·ª≠i m·ªôt s·ªë c√¢u h·ªèi m·∫´u
        print("\n4Ô∏è‚É£ Demo chat v·ªõi c√¢u h·ªèi m·∫´u...")
        
        sample_questions = [
            "Xin ch√†o! T√¥i mu·ªën bi·∫øt v·ªÅ t√¨nh h√¨nh kinh doanh c·ªßa c√¥ng ty.",
            "Doanh thu th√°ng n√†y nh∆∞ th·∫ø n√†o?",
            "Th√¥ng tin v·ªÅ ph√≤ng T√†i ch√≠nh K·∫ø to√°n?"
        ]
        
        for i, question in enumerate(sample_questions, 1):
            print(f"\n   üë§ C√¢u h·ªèi {i}: {question}")
            try:
                response = chatbot.chat(question)
                print(f"   ü§ñ Ph·∫£n h·ªìi: {response[:150]}...")
            except Exception as e:
                print(f"   ‚ùå L·ªói: {e}")
        
        # 5. Xem l·ªãch s·ª≠ chat
        print("\n5Ô∏è‚É£ L·ªãch s·ª≠ chat...")
        history = chatbot.get_session_history(limit=3)
        print(f"   üìú T·ªïng s·ªë tin nh·∫Øn: {len(history)}")
        
        # 6. K·∫øt th√∫c phi√™n chat
        print("\n6Ô∏è‚É£ K·∫øt th√∫c phi√™n chat...")
        chatbot.end_session()
        print("‚úÖ Phi√™n chat ƒë√£ k·∫øt th√∫c v√† ƒë∆∞·ª£c l∆∞u v√†o memory")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói trong v√≠ d·ª• c∆° b·∫£n: {e}")
        return False

def advanced_features_example():
    """V√≠ d·ª• c√°c t√≠nh nƒÉng n√¢ng cao"""
    print("\n" + "="*60)
    print("üöÄ V√ç D·ª§ T√çNH NƒÇNG N√ÇNG CAO")
    print("="*60)
    
    try:
        # Kh·ªüi t·∫°o chatbot
        chatbot = FarmVietnameseChatbot(
            postgres_connection=os.getenv("POSTGRES_CONNECTION"),
            cubejs_api_url=os.getenv("CUBEJS_API_URL"),
            cubejs_api_token=os.getenv("CUBEJS_API_TOKEN"),
            cubejs_schemas_path="cubejs/model/cubes",
            qdrant_url=os.getenv("QDRANT_URL"),
            knowledge_file_path="farm_data/farm_business_domain_knowledge_vietnamese.md",
            llm_model="gpt-4o",
            enable_advanced_memory=True,
            user_id="advanced_user"
        )
        
        # 1. Ki·ªÉm tra tri th·ª©c c√≥ s·∫µn
        print("1Ô∏è‚É£ Ki·ªÉm tra h·ªá th·ªëng tri th·ª©c...")
        
        collections = chatbot.get_knowledge_collections()
        print(f"   üìÅ B·ªô s∆∞u t·∫≠p tri th·ª©c: {len(collections)}")
        
        metrics = chatbot.get_available_metrics()
        print(f"   üìä Lƒ©nh v·ª±c metrics: {len(metrics)}")
        for domain, metric_list in metrics.items():
            print(f"      ‚Ä¢ {domain}: {len(metric_list)} metrics")
        
        # 2. Test CubeJS metadata
        print("\n2Ô∏è‚É£ Ki·ªÉm tra CubeJS metadata...")
        metadata = chatbot.get_cubejs_metadata()
        
        if "error" not in metadata:
            cubes = metadata.get("cubes", [])
            print(f"   ‚úÖ K·∫øt n·ªëi CubeJS th√†nh c√¥ng: {len(cubes)} cubes")
            
            # Hi·ªÉn th·ªã th√¥ng tin cube ƒë·∫ßu ti√™n
            if cubes:
                first_cube = cubes[0]
                cube_name = first_cube.get("name", "Unknown")
                measures = first_cube.get("measures", [])
                dimensions = first_cube.get("dimensions", [])
                print(f"   üìä Cube m·∫´u '{cube_name}': {len(measures)} measures, {len(dimensions)} dimensions")
        else:
            print(f"   ‚ùå L·ªói CubeJS: {metadata['error']}")
        
        # 3. Test truy v·∫•n tr·ª±c ti·∫øp
        print("\n3Ô∏è‚É£ Test truy v·∫•n CubeJS tr·ª±c ti·∫øp...")
        
        sample_query = {
            "measures": ["sales_metrics.total_revenue"],
            "dimensions": ["sales_metrics.sales_channel"],
            "limit": 3
        }
        
        result = chatbot.execute_direct_query(sample_query)
        if "error" not in result:
            data = result.get("data", [])
            print(f"   ‚úÖ Truy v·∫•n th√†nh c√¥ng: {len(data)} records")
            if data:
                print(f"   üìÑ D·ªØ li·ªáu m·∫´u: {data[0]}")
        else:
            print(f"   ‚ùå L·ªói truy v·∫•n: {result['error']}")
        
        # 4. Test ph√¢n t√≠ch truy v·∫•n ti·∫øng Vi·ªát
        print("\n4Ô∏è‚É£ Test ph√¢n t√≠ch truy v·∫•n ti·∫øng Vi·ªát...")
        
        vietnamese_queries = [
            "Doanh thu th√°ng n√†y",
            "Chi ph√≠ s·∫£n xu·∫•t tu·∫ßn tr∆∞·ªõc",
            "S·ªë nh√¢n vi√™n ph√≤ng nh√¢n s·ª±"
        ]
        
        for query in vietnamese_queries:
            if chatbot.query_mapper:
                analysis = chatbot.query_mapper.parse_vietnamese_query(query)
                if "error" not in analysis:
                    print(f"   ‚úÖ '{query}' ‚Üí Cube: {analysis.get('cube', 'N/A')}")
                else:
                    print(f"   ‚ùå '{query}' ‚Üí L·ªói: {analysis['error']}")
            else:
                print(f"   ‚ö†Ô∏è Query mapper ch∆∞a kh·ªüi t·∫°o")
        
        # 5. Test session v·ªõi memory n√¢ng cao
        print("\n5Ô∏è‚É£ Test session v·ªõi memory n√¢ng cao...")
        
        session_id = chatbot.start_session({
            "session_type": "advanced_analysis",
            "user_expertise": "expert",
            "analysis_focus": ["finance", "production", "sales"]
        })
        
        # G·ª≠i c√¢u h·ªèi ph·ª©c t·∫°p
        complex_question = "T√¥i mu·ªën ph√¢n t√≠ch xu h∆∞·ªõng doanh thu v√† chi ph√≠ s·∫£n xu·∫•t trong 3 th√°ng qua, ƒë·∫∑c bi·ªát t·∫≠p trung v√†o hi·ªáu qu·∫£ c·ªßa c∆° s·ªü Viet Farm."
        
        print(f"   üë§ C√¢u h·ªèi ph·ª©c t·∫°p: {complex_question}")
        try:
            response = chatbot.chat(complex_question)
            print(f"   ü§ñ Ph·∫£n h·ªìi: {response[:200]}...")
        except Exception as e:
            print(f"   ‚ùå L·ªói x·ª≠ l√Ω: {e}")
        
        chatbot.end_session()
        print("   ‚úÖ Session n√¢ng cao ho√†n th√†nh")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói trong v√≠ d·ª• n√¢ng cao: {e}")
        return False

def production_usage_example():
    """V√≠ d·ª• s·ª≠ d·ª•ng trong m√¥i tr∆∞·ªùng production"""
    print("\n" + "="*60)
    print("üè≠ V√ç D·ª§ S·ª¨ D·ª§NG PRODUCTION")
    print("="*60)
    
    try:
        # C·∫•u h√¨nh production v·ªõi error handling
        print("1Ô∏è‚É£ C·∫•u h√¨nh production...")
        
        # Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt
        required_vars = ["POSTGRES_CONNECTION", "QDRANT_URL", "CUBEJS_API_URL", "OPENAI_API_KEY"]
        missing_vars = [var for var in required_vars if not os.getenv(var)]
        
        if missing_vars:
            print(f"   ‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng: {', '.join(missing_vars)}")
            print("   üí° H√£y thi·∫øt l·∫≠p c√°c bi·∫øn n√†y tr∆∞·ªõc khi ch·∫°y production")
            return False
        
        # Kh·ªüi t·∫°o v·ªõi c·∫•u h√¨nh production
        chatbot = FarmVietnameseChatbot(
            postgres_connection=os.getenv("POSTGRES_CONNECTION"),
            cubejs_api_url=os.getenv("CUBEJS_API_URL"),
            cubejs_api_token=os.getenv("CUBEJS_API_TOKEN"),
            cubejs_schemas_path=os.getenv("CUBEJS_SCHEMAS_PATH", "cubejs/model/cubes"),
            qdrant_url=os.getenv("QDRANT_URL"),
            knowledge_file_path=os.getenv("KNOWLEDGE_FILE_PATH", "farm_data/farm_business_domain_knowledge_vietnamese.md"),
            llm_model=os.getenv("LLM_MODEL", "gpt-4o"),
            enable_advanced_memory=True,
            user_id="production_user"
        )
        
        print("   ‚úÖ Chatbot production ƒë√£ kh·ªüi t·∫°o")
        
        # 2. Health check
        print("\n2Ô∏è‚É£ Health check h·ªá th·ªëng...")
        status = chatbot.get_system_status()
        
        failed_components = [comp for comp, stat in status.items() if "‚ùå" in str(stat)]
        if failed_components:
            print(f"   ‚ö†Ô∏è C√°c th√†nh ph·∫ßn c√≥ v·∫•n ƒë·ªÅ: {', '.join(failed_components)}")
        else:
            print("   ‚úÖ T·∫•t c·∫£ th√†nh ph·∫ßn ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng")
        
        # 3. Test workflow th·ª±c t·∫ø
        print("\n3Ô∏è‚É£ Test workflow th·ª±c t·∫ø...")
        
        # Workflow: B√°o c√°o h√†ng ng√†y
        session_id = chatbot.start_session({
            "session_type": "daily_report",
            "user_role": "manager",
            "report_date": "2024-01-15"
        })
        
        daily_questions = [
            "B√°o c√°o t·ªïng quan t√¨nh h√¨nh kinh doanh h√¥m nay",
            "Doanh thu h√¥m nay so v·ªõi h√¥m qua thay ƒë·ªïi nh∆∞ th·∫ø n√†o?",
            "C√≥ v·∫•n ƒë·ªÅ g√¨ c·∫ßn ch√∫ √Ω trong s·∫£n xu·∫•t kh√¥ng?",
            "T√¨nh h√¨nh nh√¢n s·ª± c√≥ b·∫•t th∆∞·ªùng g√¨ kh√¥ng?"
        ]
        
        for question in daily_questions:
            print(f"   üìã {question}")
            try:
                response = chatbot.chat(question)
                print(f"   ‚úÖ ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng")
            except Exception as e:
                print(f"   ‚ùå L·ªói: {e}")
        
        # L∆∞u b√°o c√°o
        history = chatbot.get_session_history()
        print(f"   üìä B√°o c√°o ho√†n th√†nh v·ªõi {len(history)} t∆∞∆°ng t√°c")
        
        chatbot.end_session()
        
        # 4. Cleanup v√† monitoring
        print("\n4Ô∏è‚É£ Cleanup v√† monitoring...")
        print("   ‚úÖ Session ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o long-term memory")
        print("   ‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô v·ªõi vector database")
        print("   ‚úÖ Metrics ƒë√£ ƒë∆∞·ª£c ghi l·∫°i cho monitoring")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói trong v√≠ d·ª• production: {e}")
        return False

def interactive_example():
    """V√≠ d·ª• t∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi d√πng"""
    print("\n" + "="*60)
    print("üéÆ V√ç D·ª§ T∆Ø∆†NG T√ÅC")
    print("="*60)
    print("Nh·∫≠p c√¢u h·ªèi ti·∫øng Vi·ªát (ho·∫∑c 'quit' ƒë·ªÉ tho√°t)")
    
    try:
        chatbot = FarmVietnameseChatbot(
            postgres_connection=os.getenv("POSTGRES_CONNECTION"),
            cubejs_api_url=os.getenv("CUBEJS_API_URL"),
            cubejs_api_token=os.getenv("CUBEJS_API_TOKEN"),
            cubejs_schemas_path="cubejs/model/cubes",
            qdrant_url=os.getenv("QDRANT_URL"),
            knowledge_file_path="farm_data/farm_business_domain_knowledge_vietnamese.md",
            llm_model="gpt-4o",
            enable_advanced_memory=True,
            user_id="interactive_user"
        )
        
        session_id = chatbot.start_session({"session_type": "interactive"})
        print(f"üöÄ Phi√™n t∆∞∆°ng t√°c: {session_id}")
        
        # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
        print("\n" + chatbot.get_help_message())
        
        while True:
            try:
                user_input = input("\nüë§ B·∫°n: ").strip()
                
                if user_input.lower() in ['quit', 'exit', 'tho√°t', 'q']:
                    break
                
                if not user_input:
                    continue
                
                print("ü§ñ ƒêang x·ª≠ l√Ω...")
                response = chatbot.chat(user_input)
                print(f"ü§ñ Chatbot: {response}")
                
            except KeyboardInterrupt:
                print("\n\n‚èπÔ∏è D·ª´ng t∆∞∆°ng t√°c")
                break
            except Exception as e:
                print(f"‚ùå L·ªói: {e}")
        
        chatbot.end_session()
        print("‚úÖ ƒê√£ k·∫øt th√∫c phi√™n t∆∞∆°ng t√°c")
        
    except Exception as e:
        print(f"‚ùå L·ªói t∆∞∆°ng t√°c: {e}")

def main():
    """H√†m ch√≠nh ch·∫°y c√°c v√≠ d·ª•"""
    print("üå± VIETNAMESE FARM CHATBOT - V√ç D·ª§ S·ª¨ D·ª§NG üå±")
    print("="*60)
    
    setup_environment()
    
    examples = [
        ("S·ª≠ d·ª•ng c∆° b·∫£n", basic_usage_example),
        ("T√≠nh nƒÉng n√¢ng cao", advanced_features_example),
        ("M√¥i tr∆∞·ªùng production", production_usage_example)
    ]
    
    results = {}
    
    for example_name, example_func in examples:
        try:
            print(f"\n{'='*20} {example_name.upper()} {'='*20}")
            results[example_name] = example_func()
        except Exception as e:
            print(f"‚ùå L·ªói {example_name}: {e}")
            results[example_name] = False
    
    # T√≥m t·∫Øt k·∫øt qu·∫£
    print("\n" + "="*60)
    print("üìä T√ìM T·∫ÆT K·∫æT QU·∫¢")
    print("="*60)
    
    for example_name, success in results.items():
        status = "‚úÖ TH√ÄNH C√îNG" if success else "‚ùå TH·∫§T B·∫†I"
        print(f"  {status} {example_name}")
    
    successful_examples = sum(1 for success in results.values() if success)
    total_examples = len(results)
    
    print(f"\nüéØ K·∫øt qu·∫£: {successful_examples}/{total_examples} v√≠ d·ª• th√†nh c√¥ng")
    
    if successful_examples == total_examples:
        print("üéâ T·∫•t c·∫£ v√≠ d·ª• ƒë·ªÅu ch·∫°y th√†nh c√¥ng!")
        
        # ƒê·ªÅ xu·∫•t ch·∫°y demo t∆∞∆°ng t√°c
        response = input("\nüéÆ B·∫°n c√≥ mu·ªën th·ª≠ demo t∆∞∆°ng t√°c kh√¥ng? (y/n): ").strip().lower()
        if response in ['y', 'yes', 'c√≥', 'c']:
            interactive_example()
    else:
        print("‚ö†Ô∏è M·ªôt s·ªë v√≠ d·ª• th·∫•t b·∫°i. H√£y ki·ªÉm tra c·∫•u h√¨nh.")
    
    print("\nüå± C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng Vietnamese Farm Chatbot! üå±")

if __name__ == "__main__":
    main() 