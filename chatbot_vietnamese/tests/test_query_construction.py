#!/usr/bin/env python3
"""
Test Query Construction with Enhanced CubeJS Documentation
"""

from core.vietnamese_chatbot import VietnameseCubeJSChatbot

def test_query_construction():
    """Test query construction with enhanced documentation"""
    print('üîß Testing CubeJS Query Construction with Enhanced Documentation')
    print('=' * 70)

    try:
        # Initialize chatbot
        chatbot = VietnameseCubeJSChatbot()
        
        # Test connection
        connection = chatbot.test_connection()
        print(f'üì° {connection["message"]}')
        
        if connection['status'] == 'error':
            print('‚ùå Cannot test without CubeJS connection')
            return
        
        print('\nüìä Available Cubes and Fields:')
        print('-' * 40)
        schema_summary = chatbot.get_schema_summary()
        print(schema_summary)
        
        print('\nüéØ Enhanced Documentation Features:')
        print('-' * 40)
        
        # Get the enhanced schema context
        schema_context = chatbot._generate_schema_context()
        
        # Extract key sections to highlight improvements
        lines = schema_context.split('\n')
        
        # Find and display the query template section
        template_start = None
        for i, line in enumerate(lines):
            if 'QUERY STRUCTURE TEMPLATE' in line:
                template_start = i
                break
        
        if template_start:
            print('‚úÖ OFFICIAL CUBEJS QUERY TEMPLATE:')
            for i in range(template_start + 1, min(template_start + 20, len(lines))):
                if lines[i].strip() and not lines[i].startswith('‚ö†Ô∏è'):
                    print(f'   {lines[i]}')
                elif lines[i].startswith('‚ö†Ô∏è'):
                    break
        
        # Find and display the examples section
        examples_start = None
        for i, line in enumerate(lines):
            if 'CORRECT QUERY EXAMPLES' in line:
                examples_start = i
                break
        
        if examples_start:
            print('\n‚úÖ CORRECT QUERY EXAMPLES:')
            for i in range(examples_start + 1, min(examples_start + 10, len(lines))):
                if lines[i].strip() and not lines[i].startswith('‚ùå'):
                    print(f'   {lines[i]}')
                elif lines[i].startswith('‚ùå'):
                    break
        
        # Find and display the mistakes section
        mistakes_start = None
        for i, line in enumerate(lines):
            if 'COMMON MISTAKES TO AVOID' in line:
                mistakes_start = i
                break
        
        if mistakes_start:
            print('\n‚ùå COMMON MISTAKES TO AVOID:')
            for i in range(mistakes_start + 1, min(mistakes_start + 8, len(lines))):
                if lines[i].strip():
                    print(f'   {lines[i]}')
        
        print('\nüáªüá≥ Vietnamese Business Query Patterns:')
        print('-' * 40)
        
        # Find Vietnamese patterns section
        vietnamese_start = None
        for i, line in enumerate(lines):
            if 'VIETNAMESE BUSINESS QUERY PATTERNS' in line:
                vietnamese_start = i
                break
        
        if vietnamese_start:
            for i in range(vietnamese_start + 1, min(vietnamese_start + 10, len(lines))):
                if lines[i].strip() and lines[i].startswith('‚Ä¢'):
                    print(f'   {lines[i]}')
        
        print('\nüéâ Key Improvements Over Previous Version:')
        print('‚Ä¢ Based on official CubeJS REST API documentation')
        print('‚Ä¢ Complete JSON query structure template')
        print('‚Ä¢ All official filter operators (equals, gt, lt, contains, etc.)')
        print('‚Ä¢ Proper time dimension handling with granularities')
        print('‚Ä¢ Clear field naming rules with cube prefixes')
        print('‚Ä¢ Concrete examples of correct vs incorrect syntax')
        print('‚Ä¢ Vietnamese business context mapping')
        print('‚Ä¢ Structured workflow for query construction')
        
        print('\nüìà Expected Benefits:')
        print('‚Ä¢ LLM will construct proper CubeJS JSON queries')
        print('‚Ä¢ Reduced field naming errors')
        print('‚Ä¢ Better filter and operator usage')
        print('‚Ä¢ Improved time dimension handling')
        print('‚Ä¢ More accurate Vietnamese business analysis')
        
    except Exception as e:
        print(f'‚ùå Error: {e}')
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_query_construction() 