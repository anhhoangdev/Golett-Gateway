#!/usr/bin/env python3
"""
Test script for Vietnamese Farm Chatbot Data Analysis
Script ki·ªÉm tra ph√¢n t√≠ch d·ªØ li·ªáu c·ªßa Chatbot N√¥ng nghi·ªáp Vi·ªát Nam
"""

import os
import sys
from pathlib import Path

# Add the parent directory to Python path
sys.path.append(str(Path(__file__).parent.parent))

from chatbot_vietnamese.farm_chatbot import FarmVietnameseChatbot
from golett.utils.logger import get_logger

logger = get_logger(__name__)

def test_data_analysis():
    """Test Vietnamese data analysis capabilities"""
    
    print("üå± KI·ªÇM TRA PH√ÇN T√çCH D·ªÆ LI·ªÜU CHATBOT N√îNG NGHI·ªÜP VI·ªÜT NAM üå±")
    print("=" * 70)
    
    # Initialize chatbot
    try:
        chatbot = FarmVietnameseChatbot(
            postgres_connection=os.getenv("POSTGRES_CONNECTION", 
                "postgresql://postgres:postgres@localhost:5432/golett"),
            cubejs_api_url=os.getenv("CUBEJS_API_URL", 
                "http://localhost:4000/cubejs-api/v1"),
            cubejs_api_token=os.getenv("CUBEJS_API_TOKEN"),
            qdrant_url=os.getenv("QDRANT_URL", "http://localhost:6333")
        )
        
        # Start session
        session_id = chatbot.start_session()
        print(f"‚úÖ ƒê√£ kh·ªüi t·∫°o chatbot (Session: {session_id[:8]}...)")
        print()
        
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi t·∫°o chatbot: {e}")
        return
    
    # Test questions for data analysis
    test_questions = [
        "Doanh thu th√°ng n√†y c·ªßa c√¥ng ty nh∆∞ th·∫ø n√†o?",
        "Hi·ªáu su·∫•t s·∫£n xu·∫•t tu·∫ßn tr∆∞·ªõc c√≥ c·∫£i thi·ªán kh√¥ng?", 
        "Chi ph√≠ nƒÉng l∆∞·ª£ng so v·ªõi th√°ng tr∆∞·ªõc thay ƒë·ªïi ra sao?",
        "S·ªë l∆∞·ª£ng ƒë∆°n h√†ng h√¥m nay?",
        "T·ª∑ l·ªá l·ªói s·∫£n xu·∫•t t·∫°i c∆° s·ªü Viet Farm?"
    ]
    
    print("üîç KI·ªÇM TRA C√ÅC TRUY V·∫§N D·ªÆ LI·ªÜU:")
    print("-" * 50)
    
    for i, question in enumerate(test_questions, 1):
        print(f"\nüìù C√¢u h·ªèi {i}: {question}")
        print("üîÑ ƒêang ph√¢n t√≠ch...")
        
        try:
            # Test direct data analysis
            result = chatbot.analyze_vietnamese_data_query(question)
            print("üìä K·∫øt qu·∫£:")
            print(result)
            
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
        
        print("-" * 50)
    
    # Test CubeJS metadata
    print("\nüóÉÔ∏è KI·ªÇM TRA METADATA CUBEJS:")
    print("-" * 50)
    
    try:
        metadata = chatbot.get_cubejs_metadata()
        if "error" not in metadata:
            cubes = metadata.get("cubes", [])
            print(f"‚úÖ T√¨m th·∫•y {len(cubes)} cubes:")
            for cube in cubes[:3]:  # Show first 3 cubes
                cube_name = cube.get("name", "Unknown")
                measures_count = len(cube.get("measures", []))
                dimensions_count = len(cube.get("dimensions", []))
                print(f"  ‚Ä¢ {cube_name}: {measures_count} measures, {dimensions_count} dimensions")
        else:
            print(f"‚ùå L·ªói metadata: {metadata.get('error')}")
    except Exception as e:
        print(f"‚ùå L·ªói l·∫•y metadata: {e}")
    
    # Test chat interaction
    print("\nüí¨ KI·ªÇM TRA CHAT T∆Ø∆†NG T√ÅC:")
    print("-" * 50)
    
    chat_questions = [
        "Xin ch√†o! B·∫°n c√≥ th·ªÉ gi√∫p t√¥i ph√¢n t√≠ch d·ªØ li·ªáu kh√¥ng?",
        "Th√¥ng tin v·ªÅ ph√≤ng TCKT?",
        "C√°c s·∫£n ph·∫©m ch√≠nh c·ªßa c√¥ng ty?"
    ]
    
    for question in chat_questions:
        print(f"\nüë§ Ng∆∞·ªùi d√πng: {question}")
        try:
            response = chatbot.chat(question)
            print(f"ü§ñ Chatbot: {response[:200]}...")
        except Exception as e:
            print(f"‚ùå L·ªói chat: {e}")
    
    # System status
    print("\nüìä TR·∫†NG TH√ÅI H·ªÜ TH·ªêNG:")
    print("-" * 50)
    
    try:
        status = chatbot.get_system_status()
        for component, state in status.items():
            print(f"  ‚Ä¢ {component}: {state}")
    except Exception as e:
        print(f"‚ùå L·ªói l·∫•y tr·∫°ng th√°i: {e}")
    
    # End session
    try:
        chatbot.end_session()
        print("\n‚úÖ ƒê√£ k·∫øt th√∫c phi√™n ki·ªÉm tra")
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt th√∫c phi√™n: {e}")

if __name__ == "__main__":
    test_data_analysis() 