version: '3.8'

services:
  # PostgreSQL Database for structured data storage
  postgres:
    image: postgres:15-alpine
    container_name: golett-postgres
    environment:
      POSTGRES_DB: golett_db
      POSTGRES_USER: golett_user
      POSTGRES_PASSWORD: golett_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - golett-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U golett_user -d golett_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant Vector Database for semantic search
  qdrant:
    image: qdrant/qdrant:latest
    container_name: golett-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    networks:
      - golett-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional but recommended)
  # redis:
  #   image: redis:7-alpine
  #   container_name: golett-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - golett-network
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # Golett Gateway Application (development)
  # golett-app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: golett-app
  #   environment:
  #     - POSTGRES_CONNECTION=postgresql://golett_user:golett_password@postgres:5432/golett_db
  #     - QDRANT_URL=http://qdrant:6333
  #     - REDIS_URL=redis://redis:6379
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #     - LLM_MODEL=${LLM_MODEL:-gpt-4o}
  #     - USER_ID=${USER_ID:-demo_user}
  #     - KNOWLEDGE_DIR=/app/knowledge
  #   volumes:
  #     - .:/app
  #     - ./knowledge:/app/knowledge
  #     - ./logs:/app/logs
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     qdrant:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - golett-network
  #   restart: unless-stopped
  #   command: python -m uvicorn golett.api.main:app --host 0.0.0.0 --port 8000 --reload

  # pgAdmin for PostgreSQL management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: golett-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@golett.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - golett-network
    restart: unless-stopped
    profiles:
      - admin

  # Jupyter Notebook for development and experimentation (optional)
  # jupyter:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.jupyter
  #   container_name: golett-jupyter
  #   environment:
  #     - POSTGRES_CONNECTION=postgresql://golett_user:golett_password@postgres:5432/golett_db
  #     - QDRANT_URL=http://qdrant:6333
  #     - REDIS_URL=redis://redis:6379
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #   volumes:
  #     - .:/app
  #     - ./notebooks:/app/notebooks
  #     - ./knowledge:/app/knowledge
  #   ports:
  #     - "8888:8888"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     qdrant:
  #       condition: service_healthy
  #   networks:
  #     - golett-network
  #   restart: unless-stopped
  #   profiles:
  #     - dev
  #   command: jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token=''

volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  # redis_data:
  #   driver: local
  pgadmin_data:
    driver: local

networks:
  golett-network:
    driver: bridge 